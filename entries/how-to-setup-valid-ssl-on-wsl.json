{"title":"How to setup valid SSL on WSL","content":"{\"time\":1617696050197,\"blocks\":[{\"type\":\"header\",\"data\":{\"text\":\"How to setup valid SSL on WSL\",\"level\":2}},{\"type\":\"paragraph\",\"data\":{\"text\":\"Having a valid SSL certificate locally seemed to be the holy grail to me just 24 hours ago. Today I bit the bullet and went through installing one. In this article I'll show you how it can be done in about 15 minutes. I'm using WSL (Windows Subsystem for Linux) to host my code and application servers (Apache, Node, etc) and accessing the sites via the Windows host.\"}},{\"type\":\"paragraph\",\"data\":{\"text\":\"First, a screenshot of the finished product (my OS is german):\"}},{\"type\":\"image\",\"data\":{\"file\":{\"url\":\"\/images\/image.png\"},\"caption\":\"\",\"withBorder\":false,\"stretched\":false,\"withBackground\":false}},{\"type\":\"header\",\"data\":{\"text\":\"Step 1: Generate SSL Cert\",\"level\":2}},{\"type\":\"paragraph\",\"data\":{\"text\":\"I suggest you create a new directory to work in and make sure you have openssl installed.\"}},{\"type\":\"code\",\"data\":{\"code\":\"mkdir cert\\ncd cert\\nopenssl version\"}},{\"type\":\"paragraph\",\"data\":{\"text\":\"Next we're going to create a configuration file for openssl called \\\"v3.ext\\\". The name really doesn't matter, but if you use the same name it will make copy &amp; pasting easier.&nbsp;Be sure to replace the [[DOMAIN]] placeholder with the domain name you wish to use.\"}},{\"type\":\"code\",\"data\":{\"code\":\"[req]\\ndistinguished_name = req_distinguished_name\\nx509_extensions = v3_req\\nprompt = no\\n[req_distinguished_name]\\nC = US\\nST = VA\\nL = SomeCity\\nO = MyCompany\\nOU = MyDivision\\nCN = [[DOMAIN]]\\n\\n[v3_req]\\nauthorityKeyIdentifier=keyid,issuer\\nbasicConstraints=CA:FALSE\\nkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\\nsubjectAltName = @alt_names\\n\\n[alt_names]\\nDNS.1 = [[DOMAIN]]\\n\"}},{\"type\":\"paragraph\",\"data\":{\"text\":\"Next we can generate the cert files with the following command:\"}},{\"type\":\"code\",\"data\":{\"code\":\"openssl req -newkey rsa:4096 -x509 -sha256 -days 3650 -nodes -out local.crt -keyout local.key -config v3.ext\"}},{\"type\":\"paragraph\",\"data\":{\"text\":\"Lastly, if you need a .pem file you can simply use these two command to create one:\"}},{\"type\":\"code\",\"data\":{\"code\":\"cat local.key > local.pem\\ncat local.crt >> local.pem\"}},{\"type\":\"paragraph\",\"data\":{\"text\":\"Now you should have all the cert files you need.\"}},{\"type\":\"header\",\"data\":{\"text\":\"Step 2: Adding the Certificate as a trusted Authority in Windows 10\",\"level\":2}},{\"type\":\"paragraph\",\"data\":{\"text\":\"You can use the file that was generated above to configure your applications, but the certificate will show up as untrusted in the browser. To make the Certificate trusted (on your local computer) follow these steps:\"}},{\"type\":\"list\",\"data\":{\"style\":\"ordered\",\"items\":[\"Type \\\"mmc\\\" into the start menu\",\"Open the \\\"Microsoft Management Console\\\"\",\"Select \\\"File\\\" -&gt; Add\/Remove Snap-in... or use the hotkey CTRL + M\",\"Select \\\"Certificates\\\" and click \\\"Add &gt;\\\"\",\"In the popup select \\\"My user account\\\" and \\\"Finish\\\"\",\"Close the dialog by selecting \\\"OK\\\"\",\"In the Tree unter \\\"Console Root\\\" (on the left of the window) select the option \\\"Certificates\\\", then \\\"Trusted Root Certification Authorities\\\" and lastly \\\"Certificates\\\"\",\"Select \\\"Action\\\" from the top bar and then \\\"All Tasks\\\" and \\\"Import...\\\"\",\"Click next and navigate to the .crt file you created on your WSL\",\"Click next again two times and then \\\"Finish\\\"\",\"You will be warned that adding a certificate is a security risk. Confirm you want to add it.\",\"Now you can close the window. You don't need to save your changes (it only saves the view, not the changed setting)\"]}},{\"type\":\"header\",\"data\":{\"text\":\"Step 3: Add your certificate to the application\",\"level\":2}},{\"type\":\"paragraph\",\"data\":{\"text\":\"Now the only thing left to do is configure your application to use the new certificate. There are already a number of tutorials out there for different applications: <a href=\\\"https:\/\/www.rapidsslonline.com\/blog\/install-ssl-certificate-on-apache2-ubuntu-server\/\\\">Apache2<\/a>, <a href=\\\"http:\/\/nginx.org\/en\/docs\/http\/configuring_https_servers.html\\\">nginx<\/a>&nbsp;or, like in my case, for the <a href=\\\"https:\/\/webpack.js.org\/configuration\/dev-server\/#devserverhttps\\\">Vue CLI<\/a> tool.\"}},{\"type\":\"header\",\"data\":{\"text\":\"Troubleshooting\",\"level\":2}},{\"type\":\"paragraph\",\"data\":{\"text\":\"Here are some issues I had and the solutions I found:\"}},{\"type\":\"paragraph\",\"data\":{\"text\":\"<a href=\\\"https:\/\/stackoverflow.com\/questions\/43665243\/invalid-self-signed-ssl-cert-subject-alternative-name-missing\\\">Subject Alternative Name Missing<\/a>\"}},{\"type\":\"paragraph\",\"data\":{\"text\":\"<a href=\\\"https:\/\/stackoverflow.com\/questions\/44145936\/chrome-active-content-with-certificate-errors\\\">Active content with certificate errors<\/a>\"}}],\"version\":\"2.19.0\"}","url":null,"createdAt":"2021-04-05T14:41:01+00:00","slug":"how-to-setup-valid-ssl-on-wsl","decodedJson":{"time":1617696050197,"blocks":[{"type":"header","data":{"text":"How to setup valid SSL on WSL","level":2}},{"type":"paragraph","data":{"text":"Having a valid SSL certificate locally seemed to be the holy grail to me just 24 hours ago. Today I bit the bullet and went through installing one. In this article I'll show you how it can be done in about 15 minutes. I'm using WSL (Windows Subsystem for Linux) to host my code and application servers (Apache, Node, etc) and accessing the sites via the Windows host."}},{"type":"paragraph","data":{"text":"First, a screenshot of the finished product (my OS is german):"}},{"type":"image","data":{"file":{"url":"\/images\/image.png"},"caption":"","withBorder":false,"stretched":false,"withBackground":false}},{"type":"header","data":{"text":"Step 1: Generate SSL Cert","level":2}},{"type":"paragraph","data":{"text":"I suggest you create a new directory to work in and make sure you have openssl installed."}},{"type":"code","data":{"code":"mkdir cert\ncd cert\nopenssl version"}},{"type":"paragraph","data":{"text":"Next we're going to create a configuration file for openssl called \"v3.ext\". The name really doesn't matter, but if you use the same name it will make copy &amp; pasting easier.&nbsp;Be sure to replace the [[DOMAIN]] placeholder with the domain name you wish to use."}},{"type":"code","data":{"code":"[req]\ndistinguished_name = req_distinguished_name\nx509_extensions = v3_req\nprompt = no\n[req_distinguished_name]\nC = US\nST = VA\nL = SomeCity\nO = MyCompany\nOU = MyDivision\nCN = [[DOMAIN]]\n\n[v3_req]\nauthorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nsubjectAltName = @alt_names\n\n[alt_names]\nDNS.1 = [[DOMAIN]]\n"}},{"type":"paragraph","data":{"text":"Next we can generate the cert files with the following command:"}},{"type":"code","data":{"code":"openssl req -newkey rsa:4096 -x509 -sha256 -days 3650 -nodes -out local.crt -keyout local.key -config v3.ext"}},{"type":"paragraph","data":{"text":"Lastly, if you need a .pem file you can simply use these two command to create one:"}},{"type":"code","data":{"code":"cat local.key > local.pem\ncat local.crt >> local.pem"}},{"type":"paragraph","data":{"text":"Now you should have all the cert files you need."}},{"type":"header","data":{"text":"Step 2: Adding the Certificate as a trusted Authority in Windows 10","level":2}},{"type":"paragraph","data":{"text":"You can use the file that was generated above to configure your applications, but the certificate will show up as untrusted in the browser. To make the Certificate trusted (on your local computer) follow these steps:"}},{"type":"list","data":{"style":"ordered","items":["Type \"mmc\" into the start menu","Open the \"Microsoft Management Console\"","Select \"File\" -&gt; Add\/Remove Snap-in... or use the hotkey CTRL + M","Select \"Certificates\" and click \"Add &gt;\"","In the popup select \"My user account\" and \"Finish\"","Close the dialog by selecting \"OK\"","In the Tree unter \"Console Root\" (on the left of the window) select the option \"Certificates\", then \"Trusted Root Certification Authorities\" and lastly \"Certificates\"","Select \"Action\" from the top bar and then \"All Tasks\" and \"Import...\"","Click next and navigate to the .crt file you created on your WSL","Click next again two times and then \"Finish\"","You will be warned that adding a certificate is a security risk. Confirm you want to add it.","Now you can close the window. You don't need to save your changes (it only saves the view, not the changed setting)"]}},{"type":"header","data":{"text":"Step 3: Add your certificate to the application","level":2}},{"type":"paragraph","data":{"text":"Now the only thing left to do is configure your application to use the new certificate. There are already a number of tutorials out there for different applications: <a href=\"https:\/\/www.rapidsslonline.com\/blog\/install-ssl-certificate-on-apache2-ubuntu-server\/\">Apache2<\/a>, <a href=\"http:\/\/nginx.org\/en\/docs\/http\/configuring_https_servers.html\">nginx<\/a>&nbsp;or, like in my case, for the <a href=\"https:\/\/webpack.js.org\/configuration\/dev-server\/#devserverhttps\">Vue CLI<\/a> tool."}},{"type":"header","data":{"text":"Troubleshooting","level":2}},{"type":"paragraph","data":{"text":"Here are some issues I had and the solutions I found:"}},{"type":"paragraph","data":{"text":"<a href=\"https:\/\/stackoverflow.com\/questions\/43665243\/invalid-self-signed-ssl-cert-subject-alternative-name-missing\">Subject Alternative Name Missing<\/a>"}},{"type":"paragraph","data":{"text":"<a href=\"https:\/\/stackoverflow.com\/questions\/44145936\/chrome-active-content-with-certificate-errors\">Active content with certificate errors<\/a>"}}],"version":"2.19.0"}}